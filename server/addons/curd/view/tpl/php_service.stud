<%%%?php


namespace app\{$table.gen_module}\service{if $table.gen_folder}{$table.gen_folder}{/if};


use app\common\basics\Service;
use app\common\model{if $table.gen_folder}{$table.gen_folder}{/if}\{$table.gen_model};
use JetBrains\PhpStorm\ArrayShape;
use think\db\exception\DataNotFoundException;
use think\db\exception\DbException;
use think\db\exception\ModelNotFoundException;
;#;

/**
 * {$table.table_comment}服务类
 *
 * Class {$table.gen_class}Service
 * @package app\{$table.gen_class}\service{if $table.gen_folder}\{$table.gen_folder}{/if} ;#;
 */
class {$table.gen_class}Service extends Service
{
    /**
     * {$table.table_comment}列表
     *
     * @return array
     * @throws DbException
     * @author {$table.author} ;#;
     */
    #[ArrayShape(['count' => "mixed", 'list' => "mixed"])]
    public static function lists(): array
    {
{if !empty($searchArr)}
        self::setSearch([
{foreach $searchArr as $key=>$fieldsArr}
            '{$key|raw}' => {php}echo str_replace('"', '\'', json_encode($fieldsArr));{/php},
{/foreach}
        ]); ;#;
{/if}
        $model = new {$table.gen_model}();
        $lists = $model
{if !empty($listIgnore)}
            ->withoutField({php}echo str_replace('"', '\'', json_encode($listIgnore));{/php})
{/if}
{if in_array('is_delete', $fieldsArr)}
            ->where(['is_delete'=>0])
{/if}
{if !empty($searchArr)}
            ->where(self::$searchWhere)
{/if}
            ->order('{$primaryKey} desc')
            ->paginate([
                'page'      => $get['page']  ?? 1,
                'list_rows' => $get['limit'] ?? 20,
                'var_page'  => 'page'
            ])->toArray();
;#;
        return ['count'=>$lists['total'], 'list'=>$lists['data']];
    }
;#;

    /**
     * {$table.table_comment}详情
     *
     * @param int $id
     * @return array
     * @throws DataNotFoundException
     * @throws ModelNotFoundException
     {if $table.author}* @author {$table.author}{/if};#;
     */
    public static function detail(int $id): array
    {
        $model = new {$table.gen_model}();
        return $model
{if in_array('is_delete', $fieldsArr) && in_array('delete_time', $fieldsArr)}
            ->withoutField('is_delete,delete_time')
{elseif in_array('is_delete', $fieldsArr)}
            ->withoutField('is_delete,delete_time')
{elseif in_array('delete_time', $fieldsArr)}
            ->withoutField('is_delete,delete_time')
{/if}
{if in_array('is_delete', $fieldsArr)}
            ->where(['is_delete'=>0])
{/if}
            ->where(['{$primaryKey}'=>$id])
            ->findOrFail()
            ->toArray();
    }
;#;

    /**
     * {$table.table_comment}新增
     *
     * @param array $post
     {if $table.author}* @author {$table.author}{/if} ;#;
     */
    public static function add(array $post): void
    {
        {$table.gen_model}::create([
{volist name="$columns" id="vo"}
{if $vo.is_insert}
{if in_array($vo.column_name, ['create_time', 'update_time', 'delete_time'])}
            '{$vo.column_name}' => time(),
{else}
{if in_array($vo.model_type, ['int', 'float', 'double'])}
            '{$vo.column_name}' => $post['{$vo.column_name}'] ?? 0,
{else}
            '{$vo.column_name}' => $post['{$vo.column_name}'] ?? '',
{/if}
{/if}
{/if}
{/volist}
        ]);
    }

    /**
     * {$table.table_comment}编辑
     *
     * @param array $post
     {if $table.author}* @author {$table.author}{/if} ;#;
     */
    public static function edit(array $post): void
    {
        {$table.gen_model}::update([
{volist name="$columns" id="vo"}
{if $vo.is_edit}
{if $vo.is_required}
            '{$vo.column_name}' => $post['{$vo.column_name}'],
{else}
{if in_array($vo.model_type, ['int', 'float', 'double'])}
            '{$vo.column_name}' => $post['{$vo.column_name}'] ?? 0,
{else}
            '{$vo.column_name}' => $post['{$vo.column_name}'] ?? '',
{/if}
{/if}
{/if}
{/volist}
        ], ['id'=>intval($post['{$primaryKey}'])]);
    }
;#;

    /**
     * {$table.table_comment}删除
     *
     * @param int $id
     {if $table.author}* @author {$table.author}{/if} ;#;
     */
    public static function del(int $id): void
    {
{if in_array('is_delete', $fieldsArr)}
        {$table.gen_model}::update([
            'is_delete'   => 1,
            'delete_time' => time()
        ], ['{$primaryKey}'=>$id]);
{/if}
    }
}