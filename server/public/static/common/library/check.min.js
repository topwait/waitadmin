let waitCheck = {
    // 是否为数字
    isNumber: function(value) {
        const reg = /^[0-9][0-9_]*$/;
        let isTrue = true;
        if(!reg.test(value)) {
            isTrue = false;
        }
        if(value === '') {
            isTrue = false;
        }
        if(isNaN(value)) {
            isTrue = false;
        }
        return isTrue;
    },
    // 验证大于等于0的正整数
    isNumInt: function(Val) {
        const RexNum = /^[0-9]\d*$/;
        return RexNum.test(Val);
    },
    // 验证大于等于0的数字(最多可保留两位小数)
    isNumFloat: function(Val) {
        const RexNumFloat = /^(([1-9]\d*)|0)(\.\d{1,2})?$/;
        return RexNumFloat.test(Val);
    },
    // 中文字符验证
    isChinese: function(str) {
        const pattern = /[\u4e00-\u9fa5]/;
        return pattern.test(str);
    },
    // 字母数字中文及下划线(一般用于用户名验证)
    isWordsNumber: function(str) {
        const pattern = /[A-Za-z0-9_\-\u4e00-\u9fa5]+/;
        return pattern.test(str);
    },
    // QQ验证
    isTencentQQ: function(number) {
        const pattern = /[1-9]([0-9]{5,11})/;
        return pattern.test(number);
    },
    // 特殊字符验证
    isSpecialWord: function(str) {
        const pattern = /`~!@#$%^&*()_+-=[]{}\|;:'"<,>.?\//;
        return pattern.test(str);
    },
    // 强密码验证(必须包含大小写字母和数字的组合,不能使用特殊字符,长度在8-16之间)
    isStrongPwd: function(str) {
        const pattern = /^(?=.*\d)(?=.*[a-z])(?=.*[A-Z]).{8,16}$/;
        return pattern.test(str);
    },
    // 验证端口号
    isPort: function(port) {
        return !(port < 0 || port > 65535);
    },
    // ip地址验证
    isIp: function(ip) {
        let obj = ip;
        const exp = /^(\d{1,2}|1\d\d|2[0-4]\d|25[0-5])\.(\d{1,2}|1\d\d|2[0-4]\d|25[0-5])\.(\d{1,2}|1\d\d|2[0-4]\d|25[0-5])\.(\d{1,2}|1\d\d|2[0-4]\d|25[0-5])$/;
        const reg = obj.match(exp);
        return reg != null;
    },
    // 判断是否是IE
    isBrowseIE: function() {
        const tmp = document.documentMode;
        let isIE;
        try { document.documentMode = ''; } catch(e) {}
        isIE = typeof document.documentMode == 'number' || eval('/*@cc_on!@*/!1');
        try { document.documentMode = tmp; } catch(e) {}
        return isIE;
    },
    // 判断终端类型
    isTerminal: function() {
        const userAgent = window.navigator.userAgent; //获取浏览器
        if(userAgent.indexOf('Android') > -1) { return 'Android' }
        if(userAgent.indexOf('iPhone') > -1) { return 'iPhone'; }
    },
    // 验证邮箱
    isEmail: function(Val) {
        const RexEmail = /[\w!#$%&'*+/=?^_`{|}~-]+(?:\.[\w!#$%&'*+/=?^_`{|}~-]+)*@(?:[\w](?:[\w-]*[\w])?\.)+[\w](?:[\w-]*[\w])?/;
        return RexEmail.test(Val);
    },
    // 验证手机号码和座机号码
    isPhone: function(Val) {
        const RexPhone = /^([0-9]{3,4}-)?[0-9]{7,8}$/;
        const RexMob = /^((\+?86)|(\(\+86\)))?(13[012356789][0-9]{8}|15[012356789][0-9]{8}|18[02356789][0-9]{8}|147[0-9]{8}|1349[0-9]{7})$/;
        return RexPhone.test(Val) || RexMob.test(Val);
    },
    // 验证手机号码是否正确
    isMobile(number) {
        const regex = /^1[3456789]\d{9}$/;
        return regex.test(number);
    },
    // 验证身份证号是否正确
    isCard(str) {
        // 15位数身份证正则表达式
        const arg1 = /^[1-9]\d{7}((0\d)|(1[0-2]))(([0|1|2]\d)|3[0-1])\d{3}$/;
        // 18位数身份证正则表达式
        const arg2 = /^[1-9]\d{5}[1-9]\d{3}((0\d)|(1[0-2]))(([0|1|2]\d)|3[0-1])((\d{4})|\d{3}[A-Z])$/;
        return !(str.match(arg1) == null && str.match(arg2) == null);
    }
}